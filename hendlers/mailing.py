#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import logging
from datetime import timedelta
from typing import Union

import pytils
from aiogram.utils.chat_action import ChatActionSender
from sqlalchemy.ext.asyncio import AsyncSession

from core.bot import bot
from core.config import settings, TgBot, GoogleSheetsSettings
from database import async_engine, db, WriteOff, Database

from structures.keybords import boss_main_menu, get_points
from structures.keybords.cb_makers import create_inline_kb, create_inline_url_kb

from services.google_service import (google_exit, google_revenue, google_add_row, google_safe)
from services.async_google_service import google_safe, google_revenue, google_exits
from common.questions import sheets
from utils.utils import get_current_datetime, dt_formatted

tg: TgBot = settings.bot
gs: GoogleSheetsSettings = settings.gs


async def send_reminder_order():
    """–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–∞–∑ –∫–æ—Ñ–µ –∏ –¥–µ—Å–µ—Ä—Ç–æ–≤"""

    curr_datetime = get_current_datetime()
    tomorrow = pytils.dt.ru_strftime(u'%d.%m.%y', inflected=True, date=curr_datetime + timedelta(days=1))
    weekday = pytils.dt.ru_strftime(u'%A', inflected=True, date=curr_datetime)
    now = pytils.dt.ru_strftime(u'%d.%m.%y', inflected=True, date=curr_datetime)

    async with AsyncSession(async_engine) as session:
        users = await db.users_active_get(session)

    for user in users:
        position = user.position
        point = user.point
        name = user.full_name
        user_id = user.user_id

        inline_order = create_inline_url_kb(btns={'–ü–µ—Ä–µ–π—Ç–∏ –≤ –∑–∞–∫–∞–∑': 'https://clck.ru/Vrxcr'})
        inline_rotation = create_inline_kb(btns={'–ü—Ä–æ–≤–µ—Ä–∏–ª! –†–æ—Ç–∞—Ü–∏—è —Å–æ–±–ª—é–¥–µ–Ω–∞': f'checkRotation_{point}'})

        try:
            if position in ['–°—Ç. –±–∞—Ä–∏—Å—Ç–∞', '–°—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä', '–ë–∞—Ä–∏—Å—Ç–∞']:
                if weekday == '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ':
                    await bot.send_message(
                        chat_id=user_id,
                        text=f'<strong>{name}</strong>, –ø—Ä–∏–≤–µ—Ç!\n\n'
                             f'–ï—Å–ª–∏ —Ç—ã –≤ —Å–º–µ–Ω–µ, –ø—Ä–æ–≤–µ—Ä—å –¥–∞—Ç—É –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π:\n'
                             f'üî∏ –∫–æ—Ñ–µ;\n'
                             f'üî∏ –º–æ–ª–æ–∫–æ –æ–±—ã—á–Ω–æ–µ;\n'
                             f'üî∏ –º–æ–ª–æ–∫–æ –±–µ–∑–ª–∞–∫—Ç–æ–∑–Ω–æ–µ;\n'
                             f'üî∏ –º–æ–ª–æ–∫–æ –±–∞–Ω–∞–Ω–æ–≤–æ–µ;\n'
                             f'üî∏ –º–æ–ª–æ–∫–æ –∫–æ–∫–æ—Å–æ–≤–æ–µ;\n'
                             f'üî∏ –º–æ–ª–æ–∫–æ –º–∏–Ω–¥–∞–ª—å–Ω–æ–µ.\n\n'
                             f'<i>–ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏, –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —à—Ç. —Ç–æ–≤–∞—Ä–æ–≤ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–∞ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö, '
                             f'—Ç–æ–≤–∞—Ä —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º —Å—Ä–æ–∫–æ–º –≥–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ–º–µ—Å—Ç–∏ –≤–ø–µ—Ä—ë–¥!</i>',
                        reply_markup=inline_rotation
                    )
                if weekday == '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫':
                    await bot.send_message(
                        user_id,
                        f'<strong>{name}</strong>, –ø—Ä–∏–≤–µ—Ç!\n'
                        f'–ó–∞–≤—Ç—Ä–∞ <strong>{tomorrow} –¥–æ 12:00</strong>, –æ—Ç–ø—Ä–∞–≤—å –∑–∞–∫–∞–∑.\n'
                        f'–ü–æ—Å—Ç–∞–≤—â–∏–∫: –ú–∞—Å—Ç–µ—Ä –†–¢–ö\n–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –æ—Ç 5000 —Ä—É–±.',
                        reply_markup=inline_order
                    )
                if weekday == '–≤—Ç–æ—Ä–Ω–∏–∫':
                    await bot.send_message(
                        user_id,
                        f'<strong>{name}</strong>, –ø—Ä–∏–≤–µ—Ç!\n'
                        f'–°–µ–≥–æ–¥–Ω—è <strong>{now} –¥–æ 12:00</strong>, –æ—Ç–ø—Ä–∞–≤—å –∑–∞–∫–∞–∑.\n'
                        f'–ü–æ—Å—Ç–∞–≤—â–∏–∫: –ú–∞—Å—Ç–µ—Ä –†–¢–ö\n–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –æ—Ç 5000 —Ä—É–±.',
                        reply_markup=inline_order
                    )
                if weekday == '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' and point != '–ë–∞–ª–∞—à–∏—Ö–∞':
                    await bot.send_message(
                        user_id,
                        f'<strong>{name}</strong>, –ø—Ä–∏–≤–µ—Ç!\n'
                        f'–ó–∞–≤—Ç—Ä–∞ <strong>{tomorrow} –¥–æ 16:00</strong>, –æ—Ç–ø—Ä–∞–≤—å –∑–∞–∫–∞–∑.\n'
                        f'–ü–æ—Å—Ç–∞–≤—â–∏–∫: –î–µ—Å–µ—Ä—Ç —Ñ–µ–Ω—Ç–µ–∑–∏\n'
                        f'–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –æ—Ç 5000 —Ä—É–±.',
                        reply_markup=inline_order
                    )
                if weekday == '–≤—Ç–æ—Ä–Ω–∏–∫' and point != '–ë–∞–ª–∞—à–∏—Ö–∞':
                    await bot.send_message(
                        user_id,
                        f'<strong>{name}</strong>, –ø—Ä–∏–≤–µ—Ç!\n'
                        f'–°–µ–≥–æ–¥–Ω—è <strong>{now} –¥–æ 16:00</strong>, –æ—Ç–ø—Ä–∞–≤—å –∑–∞–∫–∞–∑.\n'
                        f'–ü–æ—Å—Ç–∞–≤—â–∏–∫: –î–µ—Å–µ—Ä—Ç —Ñ–µ–Ω—Ç–µ–∑–∏\n'
                        f'–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –æ—Ç 5000 —Ä—É–±.',
                        reply_markup=inline_order
                    )

                logging.info('Send reminder order: %s, %s %s > OK', user_id, name,
                             curr_datetime.strftime("%d.%m.%Y %H:%M:%S"))
        except Exception as ex:
            logging.warning('Send reminder order: %s, %s –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ > %s', user_id, name, ex)
            continue

    logging.info('Send reminder order: %s > OK', curr_datetime)


# TODO –æ–∂–∏–≤–∏—Ç—å
# async def not_send_morning_reports():
#     """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∫—Ç–æ –ø—Ä–∏—Å–ª–∞–ª —É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç"""
#     curr_datetime = get_current_datetime()
#     data = db.get_data_report(date=dt_formatted(6))
#     morning_10 = []
#     morning_12 = []
#     if not data:
#         for boss_id in tg.BOSS:
#             try:
#                 msg = f'<b>INFO {pytils.dt.ru_strftime(u"%d %B %y, %a", inflected=True, date=curr_datetime)}</b>\n' \
#                       f'‚òÄ –£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç\n' \
#                       f'{"*" * 25}\n' \
#                       f'–ù–µ—Ç –æ—Ç—á—ë—Ç–æ–≤'
#
#                 await bot.send_message(boss_id, msg)
#             except Exception as e:
#                 logging.warning(f'{boss_id} > {e}')
#     else:
#         points = get_points()
#         for i in data:
#             report_type = i[3]
#             point = i[6]
#
#             if point in points:
#                 if report_type == '–£—Ç—Ä–µ–Ω–Ω–∏–π –¥–æ 10':
#                     morning_10.append(point)
#                 elif report_type == '–£—Ç—Ä–µ–Ω–Ω–∏–π –¥–æ 12':
#                     morning_12.append(point)
#
#         morning_10 = set(morning_10)
#         morning_12 = set(morning_12)
#         x_10 = set(points) - set(morning_10)
#         x_12 = set(points) - set(morning_12)
#
#         for boss_id in tg.BOSS:
#             if boss_id != tg.BOSS_ONLY and boss_id != tg.MASTER:
#                 try:
#                     result_10 = f'–í—Å–µ –ø—Ä–∏—Å–ª–∞–ª–∏ üëç' if len(morning_10) == len(
#                         points) else f'–ü—Ä–∏—Å–ª–∞–ª–∏: {", ".join(sorted(morning_10))}\n–ù–µ –ø—Ä–∏—Å–ª–∞–ª–∏: {", ".join(sorted(x_10))}'
#
#                     msg_10 = f'<b>INFO {pytils.dt.ru_strftime(u"%d %B %y, %a", inflected=True, date=curr_datetime)}</b>\n' \
#                              f'‚òÄ –£—Ç—Ä–µ–Ω–Ω–∏–π (–¥–æ 10)\n' \
#                              f'{"*" * 25}\n' \
#                              f'{result_10}'
#
#                     await bot.send_message(boss_id, msg_10)
#
#                     result_12 = f'–í—Å–µ –ø—Ä–∏—Å–ª–∞–ª–∏ üëç' if len(morning_12) == len(
#                         points) else f'–ü—Ä–∏—Å–ª–∞–ª–∏: {", ".join(sorted(morning_12))}\n–ù–µ –ø—Ä–∏—Å–ª–∞–ª–∏: {", ".join(sorted(x_12))}'
#
#                     msg_12 = f'<b>INFO {pytils.dt.ru_strftime(u"%d %B %y, %a", inflected=True, date=curr_datetime)}</b>\n' \
#                              f'‚òÄ –£—Ç—Ä–µ–Ω–Ω–∏–π (–¥–æ 12)\n' \
#                              f'{"*" * 25}\n' \
#                              f'{result_12}'
#                     await bot.send_message(boss_id, msg_12)
#                 except Exception as e:
#                     logging.warning(f'{boss_id} –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ > {e}')
#                     continue
#     logging.info(f'not_send_morning_reports {dt_formatted()} > OK')
#
# TODO –æ–∂–∏–≤–∏—Ç—å
# async def not_send_evening_reports():
#     """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∫—Ç–æ –ø—Ä–∏—Å–ª–∞–ª –≤–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç"""
#     curr_datetime = get_current_datetime(days=-1)
#     data = db.get_data_report(date=dt_formatted(6, minus_days=1))
#     evening = []
#     if not data:
#         for boss_id in tg.BOSS:
#             try:
#                 msg = f'<b>INFO {pytils.dt.ru_strftime(u"%d %B %y, %a", inflected=True, date=curr_datetime)}</b>\n' \
#                       f'üåò –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç\n' \
#                       f'{"*" * 25}\n' \
#                       f'–ù–µ—Ç –æ—Ç—á—ë—Ç–æ–≤'
#
#                 await bot.send_message(boss_id, msg)
#             except Exception as e:
#                 logging.warning(f'{boss_id} > {e}')
#     else:
#         points = get_points()
#         for i in data:
#             report_type = i[3]
#             point = i[6]
#
#             if point in points and report_type == '–í–µ—á–µ—Ä–Ω–∏–π':
#                 evening.append(point)
#
#         evening = set(evening)
#         y = set(points) - set(evening)
#
#         for boss_id in tg.BOSS:
#             if boss_id != tg.BOSS_ONLY and boss_id != tg.MASTER:
#                 try:
#                     result = f'–í—Å–µ –ø—Ä–∏—Å–ª–∞–ª–∏ üëç' if len(evening) == len(
#                         points) else f'–ü—Ä–∏—Å–ª–∞–ª–∏: {", ".join(sorted(evening))}\n–ù–µ –ø—Ä–∏—Å–ª–∞–ª–∏: {", ".join(sorted(y))}'
#
#                     msg = f'<b>INFO {pytils.dt.ru_strftime(u"%d %B %y, %a", inflected=True, date=curr_datetime)}</b>\n' \
#                           f'üåò –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç\n' \
#                           f'{"*" * 25}\n' \
#                           f'{result}'
#
#                     await bot.send_message(boss_id, msg)
#                 except Exception as e:
#                     logging.warning(f'{boss_id} –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ > {e}')
#                     continue
#     logging.info(f'not_send_evening_reports {dt_formatted()} > OK')


async def revenue_by_day(user_id: Union[str, int] = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã—Ä—É—á–∫–∏ –∑–∞ –¥–µ–Ω—å –≤ 00:05"""

    date = pytils.dt.ru_strftime(u"%d %B %y, %a", inflected=True, date=get_current_datetime(days=-1))
    revenue = await google_revenue()  # await google_revenue(gs.BOOK_SALARY, gs.SHEET_SALARY)

    msg = f'<b>INFO {date}</b>\n' \
          f'üí∞ –í—ã—Ä—É—á–∫–∞ –∑–∞ –¥–µ–Ω—å\n' \
          f'{"*" * 25}\n' \
          f'{revenue}\n' \
          f'#–í—ã—Ä—É—á–∫–∞'

    if user_id:
        await bot.send_message(user_id, msg)
    else:
        for user_id in tg.BOSS:
            try:
                await bot.send_message(user_id, msg, reply_markup=boss_main_menu)
            except Exception as ex:
                logging.warning('Revenue by day: %s –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ > %s', user_id, ex)
                continue

    logging.info('Revenue by day: %s > OK', dt_formatted())


async def safe():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞—Ç–∫–∞ –≤ —Å–µ–π—Ñ–µ –≤ 9:00 —Ç–µ–º –∫—Ç–æ –≤ —Å–º–µ–Ω–µ"""
    curr_datetime = get_current_datetime()
    data = await google_safe()  # await google_safe(gs.BOOK_SALARY, gs.SHEET_SAFE)

    async with AsyncSession(async_engine) as session:
        users = await db.users_active_get(session)

    schedule_today = await google_exits(offset=0, scheduled=True)

    if schedule_today:
        check = []
        for user in users:
            user_id = user.user_id
            last_name = user.last_name
            point = user.point
            try:
                if last_name in schedule_today and user_id not in check and user_id not in tg.BOSS:
                    d = '\n'.join([f'{el[0]} {el[1]}' for el in data if el[0] == point and el[1] is not None])
                    msg = f'<b>INFO {pytils.dt.ru_strftime(u"%d %B %y, %a", inflected=True, date=curr_datetime)}</b>\n' \
                          f'üí∞ –û—Å—Ç–∞—Ç–æ–∫ –≤ —Å–µ–π—Ñ–µ\n' \
                          f'{"*" * 25}\n' \
                          f'{d}\n' \
                          f'#–°–µ–π—Ñ'
                    logging.info(f'safe: {last_name} > {msg}')
                    check.append(user_id)
                    await bot.send_message(user_id, msg)
            except Exception as ex:
                logging.warning('Safe: %s %s –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ > %s', user_id, user.full_name, ex)
                continue

        logging.info('Safe: %s > OK', dt_formatted())
    else:
        logging.warning('Safe: %s', curr_datetime)


async def safe_boss(user_id: Union[str, int] = None, reply_markup=boss_main_menu):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞—Ç–∫–∞ –≤ —Å–µ–π—Ñ–µ"""

    curr_datetime = get_current_datetime()
    values = await google_safe(boss=True)  # await google_safe(gs.BOOK_SALARY, gs.SHEET_SAFE, boss=True)

    if values:
        msg = f'<b>INFO {pytils.dt.ru_strftime(u"%d %B %y, %a", inflected=True, date=curr_datetime)}</b>\n' \
              f'üí∞ –û—Å—Ç–∞—Ç–æ–∫ –≤ —Å–µ–π—Ñ–µ\n' \
              f'{"*" * 25}\n' \
              f'{values}\n' \
              f'#–°–µ–π—Ñ–û—Å—Ç–∞—Ç–∫–∏'
    else:
        msg = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'

    await bot.send_message(chat_id=user_id, text=msg, reply_markup=reply_markup)
    logging.info('Safe boss: %s > OK', dt_formatted())


async def send_comes_out():
    """`–í—ã—Ö–æ–¥ –∑–∞–≤—Ç—Ä–∞` –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    curr_datetime = get_current_datetime()

    async with AsyncSession(async_engine) as session:
        users = await db.users_active_get(session)

    schedule_tomorrow = await google_exits(offset=1, scheduled=True)
    # await exit_google(gs.BOOK_TABLE_ID, gs.SHEET_EXITS, period=2, staff_array=True)
    if schedule_tomorrow:
        check = []
        for user in users:
            user_id = user.user_id
            last_name = user.last_name
            first_name = user.first_name
            point = user.point

            try:
                if last_name in schedule_tomorrow and user_id not in check and user_id not in tg.BOSS:
                    msg = f'<strong>{first_name}</strong>, –ø—Ä–∏–≤–µ—Ç!\n–ó–∞–≤—Ç—Ä–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É: {point}.\n' \
                          f'–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫, —Å–æ–æ–±—â–∏ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–µ @sasha_izy, –æ–Ω–∞ –ø–æ–ø—Ä–∞–≤–∏—Ç –≥—Ä–∞—Ñ–∏–∫.'
                    check.append(user_id)
                    await bot.send_message(user_id, msg)
                    logging.info(f'comes_out: {last_name} > OK')
            except Exception as ex:
                logging.warning('Send comes out: %s %s –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ > %s', user_id, user.full_name, ex)
                continue

        logging.info('Send comes out: %s > OK', dt_formatted())
    else:
        logging.warning("Send comes out: %s", curr_datetime)


async def send_check_up():
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å `–ß–µ–∫ UP`"""
    curr_datetime = get_current_datetime()

    async with AsyncSession(async_engine) as session:
        users = await db.users_active_get(session)

    schedule_today = await google_exits(offset=0, scheduled=True)
    # await exit_google(gs.BOOK_TABLE_ID, gs.SHEET_EXITS, period=1, staff_array=True)
    if schedule_today:
        check = []
        for user in users:
            user_id = user.user_id
            last_name = user.last_name
            first_name = user.first_name

            try:
                if last_name in schedule_today and user_id not in check:
                    time = dt_formatted(5)
                    check.append(user_id)

                    if time == '09':
                        await bot.send_message(user_id,
                                               f'<strong>${first_name}</strong>, —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —ç—Å–ø—Ä–µ—Å—Å–æ –∏ '
                                               f'–æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å 9:50 –¥–æ 10:00.\n'
                                               f'"–î–æ 10", —Ñ–æ—Ç–æ –ø–æ —Ç–æ—á–∫–µ –æ—Ç–ø—Ä–∞–≤—å –¥–æ 10:00!'
                                               f'"–î–æ 12", –≤–∏–¥–µ–æ –ø–æ —Ç–æ—á–∫–µ –æ—Ç–ø—Ä–∞–≤—å –¥–æ 12:00!')
                    elif time == '21':
                        await bot.send_message(user_id, f'<strong>${first_name}</strong>, —Å–º–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É.\n'
                                                        f'–ù–µ –∑–∞–±—É–¥—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Ç–æ—á–∫–µ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è, –¥–æ 00:00!')
            except Exception as e:
                logging.warning(f'{user_id}, {user.full_name} –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ > {e}')
                continue
        logging.info(f'send_check_up {curr_datetime} > OK')
    else:
        logging.warning(f'send_check_up {curr_datetime}')


async def write_off_coffee():
    """–°–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ñ–µ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ `–ß–∏—Å—Ç–∫–∞ –∫–æ—Ñ–µ–º–æ–ª–∫–∏`"""
    curr_datetime = get_current_datetime()

    async with AsyncSession(async_engine) as session:
        points = await get_points()
        for point in points:
            user = await Database(session).user.get_one(user_id=6968474689)
            await Database(session).write_off.add(
                WriteOff(
                    point=point,
                    user_id=user.id,
                    code=4014,
                    quantity=0.006,
                    reason="–ü–æ—Ä—á–∞",
                    comment="–ß–∏—Å—Ç–∫–∞ –∫–æ—Ñ–µ–º–æ–ª–∫–∏",
                )
            )

        await google_add_row(
            gs.BOOK_WRITE_OFF_ID, sheets[point],
            array=[
                curr_datetime.strftime('%Y-%m-%d %H:%M:%S'),
                6968474689,
                "Bot —Å–µ—Ä–≤–∏—Å–Ω—ã–π",
                4014,
                "",
                0.006,
                "–ü–æ—Ä—á–∞",
                "–ß–∏—Å—Ç–∫–∞ –∫–æ—Ñ–µ–º–æ–ª–∫–∏",
                "",
                "",
                "–°–ø–∏—Å–∞–Ω–∏–µ –±–µ–∑ –ú–û–õ"
            ]
        )

    logging.info(f'Write off coffee: %s > OK', curr_datetime)


async def send_reminder_coffee_machine():
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ `–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ñ–µ–º–æ–ª–∫–∏ –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º`"""
    curr_datetime = get_current_datetime()
    weekday = pytils.dt.ru_strftime(u'%A', inflected=True, date=curr_datetime)

    if weekday == "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":

        async with AsyncSession(async_engine) as session:
            users = await db.users_active_get(session)

        now = pytils.dt.ru_strftime(u'%d.%m.%y', inflected=True, date=curr_datetime)
        schedule_today = await google_exits(offset=0, scheduled=True)

        if schedule_today:
            check = []
            for user in users:
                user_id = user.user_id
                last_name = user.last_name
                first_name = user.first_name

                try:
                    if last_name in schedule_today and user_id not in check:
                        time = dt_formatted(5)
                        check.append(user_id)
                        if time == '10':

                            inline = create_inline_url_kb(
                                btns={'–û–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ': 'https://clck.ru/gki6W'},
                            )

                            msg = f'<strong>{first_name}</strong>, –ø—Ä–∏–≤–µ—Ç!\n' \
                                  f'–°–µ–≥–æ–¥–Ω—è {now} –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –Ω—É–∂–Ω–æ –ø–æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ñ–µ–º–æ–ª–∫—É.\n' \
                                  f'–ï—Å–ª–∏ –Ω–µ –æ–¥–∏–Ω –≤ —Å–º–µ–Ω–µ, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏.'
                            await bot.send_message(user_id, msg, reply_markup=inline)
                        elif time == '21':
                            await bot.send_message(user_id, f'–£–≤–µ—Ä–µ–Ω, —Ç—ã –Ω–µ –∑–∞–±—ã–ª –ø–æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ñ–µ–º–æ–ª–∫—É.')
                except Exception as e:
                    logging.warning(f'{user_id}, {user.full_name} –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ > {e}')
                    continue
        logging.info(f'send_reminder_coffee_machine {curr_datetime} > OK')
    else:
        logging.warning(f'send_reminder_coffee_machine {curr_datetime}')

# TODO –æ–∂–∏–≤–∏—Ç—å
# async def update_supervisor_report():
#     """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü–µ –ö–Ω–∏–≥–∞ SV (–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ª–∏—Å—Ç DAY)"""
#     data = db.fetchall('check_day',
#                        ['report_id', 'add_date', 'add_datetime', 'check_datetime', 'duration', 'type', 'name', 'point',
#                         'question_one', 'verified', 'comment', 'in_time', 'supervisor'])
#     await google_worksheet_update(gs.BOOK_SUPERVISOR, gs.SHEET_DAY_CHECK, data)

# TODO –æ–∂–∏–≤–∏—Ç—å
# async def drop_records():
#     from datetime import datetime
#     # start_month = datetime(datetime.now().year, datetime.now().month, 1).strftime('%Y-%m-%d')
#     start_year = datetime(datetime.now().year, 1, 1).strftime('%Y-%m-%d')
#     db.delete('check_day', 'add_date', start_year, '<')
#     db.delete('write_off', 'add_date', start_year, '<')
#     logging.info(f'drop_records {dt_formatted()} > OK')
