#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from typing import Union, List

from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)

from sqlalchemy.ext.asyncio import AsyncSession

from database import async_engine, Database

from structures.keybords.cb_makers import create_kb
from structures.keybords.keybords_list import *
from structures.role import Role
from utils.utils import subsets_combinations

boss_main_menu = create_kb(btns=boss_main_m)

boss_staff_menu = ReplyKeyboardMarkup(
    keyboard=[
        [
            *(KeyboardButton(text=text) for text in boss_staff_m[0])
        ],
        [
            *(KeyboardButton(text=text) for text in boss_staff_m[1])
        ],
        [
            *(KeyboardButton(text=text) for text in boss_staff_m[2])
        ]
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)

boss_report_menu = create_kb(btns=boss_report_m)
boss_payments_category_menu = create_kb(btns=boss_payments_category_m)
boss_category_menu = create_kb(btns=boss_category_m)
boss_payments_menu = create_kb(btns=boss_payments_m)
boss_projects_works_menu = create_kb(btns=boss_projects_works_m)
boss_projects_expenses_menu = create_kb(btns=boss_projects_expenses_m)
boss_home_works_menu = create_kb(btns=boss_home_works_m)
boss_home_expenses_menu = create_kb(btns=boss_home_expenses_m)
boss_other_menu = create_kb(btns=boss_other_m)
main_menu = create_kb(btns=staff_main_m)
grind_type_menu = create_kb(btns=grind_type_m)
morning_type_menu = create_kb(btns=morning_type_m)
no_check = create_kb(btns=('–ë–µ–∑ —á–µ–∫–∞',))
no_comment = create_kb(btns=('–ù–µ—Ç', '‚ùå –û—Ç–º–µ–Ω–∞'), input_field_placeholder='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...')


# —Ç–æ—á–∫–∏
async def get_points() -> List[str]:
    points_all = await get_points_all()
    return [p for p in points_all if '–û—Ñ–∏—Å' not in p]


# —Ç–æ—á–∫–∏ –≤—Å–µ
async def get_points_all(not_in: tuple = ('–¢–µ—Å—Ç',)) -> List[str]:
    async with AsyncSession(async_engine) as session:
        points = await Database(session).point.get_all()
        return [
            p.name
            for point in points
            for p in [point] if p.name not in not_in
        ]


async def points_menu() -> ReplyKeyboardMarkup:
    return create_kb(btns=(*await get_points(), '‚ùå –û—Ç–º–µ–Ω–∞'), sizes=(1,))


async def points_menu_all() -> ReplyKeyboardMarkup:
    return create_kb(btns=(*sorted(await get_points_all()), '‚ùå –û—Ç–º–µ–Ω–∞'), sizes=(1,))


async def employee_menu(active: bool = True, check: bool = False) -> Union[tuple, ReplyKeyboardMarkup]:
    async with AsyncSession(async_engine) as session:
        users = await Database(session).user.get_all()

    if active:
        staff = (
            user.full_name
            for user in users if user.status
        )
    else:
        staff = (
            user.full_name
            for user in users
        )

    if check:
        return tuple(staff)

    return create_kb(btns=(*sorted(tuple(staff)), '‚ùå –û—Ç–º–µ–Ω–∞'), sizes=(1,))


async def points_menu_sv() -> ReplyKeyboardMarkup:
    return create_kb(btns=(*subsets_combinations(await get_points_all(('–¢–µ—Å—Ç', '–û—Ñ–∏—Å'))), '‚ùå –û—Ç–º–µ–Ω–∞'), sizes=(1,))


points_sv_menu = create_kb(
    btns=(
        '–ë–∞–ª–∞—à–∏—Ö–∞, –ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π',
        '–ë–∞–ª–∞—à–∏—Ö–∞, –ù–æ–≥–∏–Ω—Å–∫',
        '–ë–∞–ª–∞—à–∏—Ö–∞, –ù–æ–≥–∏–Ω—Å–∫ 2',
        '–ë–∞–ª–∞—à–∏—Ö–∞, –≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å',
        '–ù–æ–≥–∏–Ω—Å–∫, –≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å',
        '–ù–æ–≥–∏–Ω—Å–∫ 2, –≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å',
        '–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π, –ù–æ–≥–∏–Ω—Å–∫',
        '–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π, –ù–æ–≥–∏–Ω—Å–∫ 2',
        '–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π, –≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å',
        '–ë–∞–ª–∞—à–∏—Ö–∞, –ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π, –ù–æ–≥–∏–Ω—Å–∫, –≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å',
        '–ë–∞–ª–∞—à–∏—Ö–∞, –ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π, –ù–æ–≥–∏–Ω—Å–∫, –ù–æ–≥–∏–Ω—Å–∫ 2, –≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å',
        '–ù–µ —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä',
        '‚ùå –û—Ç–º–µ–Ω–∞'
    ), sizes=(1,))

positions = create_kb(btns=(*company_positions, '‚ùå –û—Ç–º–µ–Ω–∞'), sizes=(1,))

role_menu = create_kb(btns=(*Role.values(), '‚ùå –û—Ç–º–µ–Ω–∞'), sizes=(1,))

yes_no_cancel = create_kb(btns=('–î–∞', '–ù–µ—Ç', '‚ùå –û—Ç–º–µ–Ω–∞'))
yes_no = create_kb(btns=('–î–∞', '–ù–µ—Ç'))
all_ok = create_kb(btns=('–í—Å–µ –û–ö', '‚ùå –û—Ç–º–µ–Ω–∞'))
ok = create_kb(btns=('–í—Å–µ –û–ö',), input_field_placeholder='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...')
no = create_kb(btns=('–ù–µ—Ç',), input_field_placeholder='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...')

safe_menu = create_kb(btns=safe_m)
cancel_menu = create_kb(btns=('‚ùå –û—Ç–º–µ–Ω–∞',), input_field_placeholder='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...')

q1_a = create_kb(btns=('–î–∞', '–ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã', '–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º', '‚ùå –û—Ç–º–µ–Ω–∞'))
write_off_menu = create_kb(btns=(*write_off_reasons, '‚ùå –û—Ç–º–µ–Ω–∞'))

location = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text='üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', request_location=True)
        ]
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)

remove = ReplyKeyboardRemove()
