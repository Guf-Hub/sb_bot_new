#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import calendar
import logging
import time
from datetime import datetime, timedelta
from pprint import pformat
from typing import Union, List

import gspread
from gspread import Client, Spreadsheet, Worksheet
from gspread.utils import ValueRenderOption, ValueInputOption, GridRangeType

from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
import google.auth.transport.requests

import pandas as pd
import pprintpp as pp
from alive_progress import alive_bar

from core.config import settings, GoogleSheetsSettings
from utils.utils import get_current_datetime, dt_formatted

pp = pp.PrettyPrinter(indent=4)
gs: GoogleSheetsSettings = settings.gs

SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive',
]


def get_client() -> Client:
    """
    Retrieve credentials for logging into a Google Drive account.

    Returns:
        Client: A gspread Client instance for interacting with Google Sheets.
    """
    return gspread.service_account(filename=gs.credentials, scopes=SCOPES)


async def get_credentials():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç Google Drive
    """
    return Credentials.from_service_account_file(filename=gs.credentials, scopes=SCOPES)


async def authorize():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ Google Drive"""
    credentials = await get_credentials()
    return gspread.authorize(credentials)


async def google_authorize_token():
    credentials = await get_credentials()
    credentials.refresh(google.auth.transport.requests.Request())
    return credentials.token


async def get_spreadsheet(book_id: str, version_6: bool = True) -> Spreadsheet:
    """–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É.

    :param version_6: gspread version > 6*
    :param book_id: id –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
    """
    if version_6:
        gc = get_client()
    else:
        gc = await authorize()
    return gc.open_by_key(book_id)


async def getting_all_values(ws: Worksheet, to_dict: bool = False) -> list[list] | list[dict]:
    if to_dict:
        return ws.get_all_records()
    return ws.get_all_values()


async def google_revenue(book_id: str, sheet_name: str) -> str:
    """`–í—ã—Ä—É—á–∫–∞ –∑–∞ –¥–µ–Ω—å` –∏–∑ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã.

    :param book_id: id –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
    :param sheet_name: –∏–º—è –ª–∏—Å—Ç–∞ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
    """
    ss: Spreadsheet = await get_spreadsheet(book_id)
    values = ss.worksheet(sheet_name).get_values('A2:B7')
    return '\n'.join([f'{v[0]} {v[1]}' for v in values if any(v) and v[0] != '']).replace('–ò—Ç–æ–≥–æ', '<b>–ò—Ç–æ–≥–æ</b>')


async def google_safe(book_id: str, sheet_name: str, boss: bool = False) -> str | list:
    """`–í—ã—Ä—É—á–∫–∞ –∑–∞ –¥–µ–Ω—å` –∏–∑ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã.

    :param book_id: id –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
    :param sheet_name: –∏–º—è –ª–∏—Å—Ç–∞ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
    :param boss: —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–∏ –≤ —Å–µ–π—Ñ–µ
    """
    ss: Spreadsheet = await get_spreadsheet(book_id)
    if boss:
        values = ss.worksheet(sheet_name).get_values('A2:B7')
        return '\n'.join([f'{v[0]} {v[1]}' for v in values if any(v) and v[0] != '']).replace('–ò—Ç–æ–≥–æ', '<b>–ò—Ç–æ–≥–æ</b>')
    return ss.worksheet(sheet_name).get_values('A2:B6')


async def google_exit(book_id: str, sheet_name: str, period: int = 1, staff_array: bool = False) -> [list, None]:
    """`–í—ã—Ö–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞` –∑–∞ –ø–µ—Ä–∏–æ–¥ –∏–∑ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã.

    :param book_id: id –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
    :param sheet_name: –∏–º—è –ª–∏—Å—Ç–∞ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
    :param period: (optional) 1 - —Å–µ–≥–æ–¥–Ω—è; 2 - –∑–∞–≤—Ç—Ä–∞.
    :param staff_array: bool
    """
    ss: Spreadsheet = await get_spreadsheet(book_id)
    values = ss.worksheet(sheet_name).get_values()
    if values:
        df = pd.DataFrame(values, index=None)
        df = df.rename(columns=df.iloc[0])
        df = df.drop(index=[0])
        df['–î–∞—Ç–∞'] = pd.to_datetime(df['–î–∞—Ç–∞'])

        if period == 1:
            date_start = get_current_datetime()
            date_start = datetime(date_start.year, date_start.month, date_start.day)
            date_end = get_current_datetime(1)
            date_end = datetime(date_end.year, date_end.month, date_end.day)
            df = df.loc[(df['–î–∞—Ç–∞'] >= date_start) & (df['–î–∞—Ç–∞'] < date_end)]

        if period == 2:
            date_start = get_current_datetime(1)
            date_start = datetime(date_start.year, date_start.month, date_start.day)
            date_end = get_current_datetime(2)
            date_end = datetime(date_end.year, date_end.month, date_end.day)
            df = df.loc[(df['–î–∞—Ç–∞'] >= date_start) & (df['–î–∞—Ç–∞'] < date_end)]

        df['–î–∞—Ç–∞'] = df['–î–∞—Ç–∞'].dt.strftime('%d.%m.%y')
        df = df[['–î–∞—Ç–∞', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫', '–¢–æ—á–∫–∞', '–°–º–µ–Ω–∞']].sort_values(['–¢–æ—á–∫–∞', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'])

        if staff_array:
            return [i[1].split(" ")[0] for i in df.values if i[1] is not None]

        if not staff_array and len(df.values):
            return [f'–î–∞—Ç–∞: {i[0]}\n–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {i[1]}\n–¢–æ—á–∫–∞: {i[2]}\n–°–º–µ–Ω–∞: {i[3]} —á–∞—Å–æ–≤' for i in df.values]
    else:
        return None


async def google_exits_by_point(book_id: str, sheet_name: str, point: str, s_date: int = 1, e_date: int = 2) -> list:
    """`Chat_id` —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤ —Å–º–µ–Ω–µ –Ω–∞ —Ç–æ—á–∫–µ –∏–∑ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã.

    :param book_id: id –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
    :param sheet_name: –∏–º—è –ª–∏—Å—Ç–∞ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
    :param point: —Ç–æ—á–∫–∞
    :param s_date: —Ç–∏–ø –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç 0 (—Å–µ–≥–æ–¥–Ω—è), 1 (–∑–∞–≤—Ç—Ä–∞)
    :param e_date: —Ç–∏–ø –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç 1 (–∑–∞–≤—Ç—Ä–∞), 2 (–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)
    """
    ss: Spreadsheet = await get_spreadsheet(book_id)
    values = ss.worksheet(sheet_name).get_values()

    df = pd.DataFrame(values, index=None)
    df = df.rename(columns=df.iloc[0])
    df = df.drop(index=[0])
    df['–î–∞—Ç–∞'] = pd.to_datetime(df['–î–∞—Ç–∞'])

    date_start = get_current_datetime(s_date)
    date_start = datetime(date_start.year, date_start.month, date_start.day)
    date_end = get_current_datetime(e_date)
    date_end = datetime(date_end.year, date_end.month, date_end.day)
    df = df.loc[(df['–î–∞—Ç–∞'] >= date_start) & (df['–î–∞—Ç–∞'] < date_end) & (df['–¢–æ—á–∫–∞'] == point)]
    df = df[['chat_id']].sort_values(['chat_id'])

    if len(df.values):
        return [int(i[0]) for i in df.values if i[0] is not None]


async def exits_google(book_id: str, sheet_name: str, employee: str = None, period: int = 1, boss: bool = False) -> str:
    """`–í—ã—Ö–æ–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤` –∑–∞ –ø–µ—Ä–∏–æ–¥ –∏–∑ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã.

    :param book_id: id –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
    :param sheet_name: –∏–º—è –ª–∏—Å—Ç–∞ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
    :param employee: (optional) —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π
    :param period: (optional) 1 - –∑–∞ –º–µ—Å—è—Ü, –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É; 2 - 7 –¥–Ω., –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É; 3 - —Å–µ–≥–æ–¥–Ω—è; 4 - –∑–∞–≤—Ç—Ä–∞; 5 - 7 –¥–Ω.
    :param boss: True, –µ—Å–ª–∏ –æ—Ç—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    ss: Spreadsheet = await get_spreadsheet(book_id)
    values = ss.worksheet(sheet_name).get_values()

    df = pd.DataFrame(values, index=None)
    df = df.rename(columns=df.iloc[0])
    df = df.drop(index=[0])
    df['–î–∞—Ç–∞'] = pd.to_datetime(df['–î–∞—Ç–∞'])

    if period == 1:
        date = get_current_datetime()
        date_start = datetime(date.year, date.month, 1)
        date_end = datetime(date.year, date.month, 1) + timedelta(days=calendar.monthrange(date.year, date.month)[1])
        df = df.loc[(df['–°–æ—Ç—Ä—É–¥–Ω–∏–∫'] == employee) & (df['–î–∞—Ç–∞'] >= date_start) & (df['–î–∞—Ç–∞'] < date_end)]

    if period == 2:
        date_start = get_current_datetime()
        date_start = datetime(date_start.year, date_start.month, date_start.day)
        date_end = get_current_datetime(7)
        date_end = datetime(date_end.year, date_end.month, date_end.day)
        df = df.loc[(df['–°–æ—Ç—Ä—É–¥–Ω–∏–∫'] == employee) & (df['–î–∞—Ç–∞'] >= date_start) & (df['–î–∞—Ç–∞'] < date_end)]

    if period == 3:
        date_start = get_current_datetime()
        date_start = datetime(date_start.year, date_start.month, date_start.day)
        date_end = get_current_datetime(1)
        date_end = datetime(date_end.year, date_end.month, date_end.day)
        df = df.loc[(df['–î–∞—Ç–∞'] >= date_start) & (df['–î–∞—Ç–∞'] < date_end)]

    if period == 4:
        date_start = get_current_datetime(1)
        date_start = datetime(date_start.year, date_start.month, date_start.day)
        date_end = get_current_datetime(2)
        date_end = datetime(date_end.year, date_end.month, date_end.day)
        df = df.loc[(df['–î–∞—Ç–∞'] >= date_start) & (df['–î–∞—Ç–∞'] < date_end)]

    if period == 5:
        date_start = get_current_datetime()
        date_start = datetime(date_start.year, date_start.month, date_start.day)
        date_end = get_current_datetime(7)
        date_end = datetime(date_end.year, date_end.month, date_end.day)
        df = df.loc[(df['–î–∞—Ç–∞'] >= date_start) & (df['–î–∞—Ç–∞'] < date_end)]

    df['–î–∞—Ç–∞'] = df['–î–∞—Ç–∞'].dt.strftime('%d.%m.%y')
    df = df[['–î–∞—Ç–∞', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫', '–¢–æ—á–∫–∞', '–°–º–µ–Ω–∞']].sort_values(['–î–∞—Ç–∞'])

    if boss:
        data = tuple(f'–î–∞—Ç–∞: {i[0]}\n–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {i[1]}\n–¢–æ—á–∫–∞: {i[2]}\n–°–º–µ–Ω–∞: {i[3]} —á–∞—Å–æ–≤' for i in df.values)
    else:
        data = tuple(f'–î–∞—Ç–∞: {i[0]}\n–¢–æ—á–∫–∞: {i[2]}\n–°–º–µ–Ω–∞: {i[3]} —á–∞—Å–æ–≤' for i in df.values)

    if len(data):
        return f'\n{"*" * 15}\n'.join(data)
    else:
        return '–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≥—Ä–∞—Ñ–∏–∫ üòï'


async def google_write_off(book_id: str, sheet_name: str, cols: list) -> list:
    """``–§–∞–π–ª —Å–ø–∏—Å–∞–Ω–∏—è`` –ø–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–ø–∏—Å–∞–Ω–∏—è.

    :param book_id: id –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
    :param sheet_name: –∏–º—è –ª–∏—Å—Ç–∞ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
    :param cols: –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤, —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞
    """
    ss: Spreadsheet = await get_spreadsheet(book_id)
    values = ss.worksheet(sheet_name).get_values()
    logging.info('Write off values\n%s', pformat(values))

    # df = pd.DataFrame(values, index=None)
    # pd.set_option("display.max.columns", None)
    # df = df.rename(columns=df.iloc[0])
    # df = df.drop(index=[0])
    # df['–î–∞—Ç–∞'] = pd.to_datetime(df['–î–∞—Ç–∞'])
    #
    # return df[cols].sort_values(['–°–æ—Ç—Ä—É–¥–Ω–∏–∫', '–î–∞—Ç–∞']).values

    df = pd.DataFrame(values[1:], columns=values[0])
    df['–î–∞—Ç–∞'] = pd.to_datetime(df['–î–∞—Ç–∞'])
    return df[cols].sort_values(['–°–æ—Ç—Ä—É–¥–Ω–∏–∫', '–î–∞—Ç–∞']).values


async def google_get_all_records(book_id: str, sheet_name: str) -> List[dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã.

    :param book_id: id –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
    :param sheet_name: –∏–º—è –ª–∏—Å—Ç–∞ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
    """
    ss: Spreadsheet = await get_spreadsheet(book_id)
    return ss.worksheet(sheet_name).get_all_records(value_render_option=ValueRenderOption.unformatted)


async def google_add_row(book_id: str, sheet_name: str, array: Union[list, tuple]) -> None:
    """`–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏` –Ω–∞ –ª–∏—Å—Ç (sheet_name) —Ç–∞–±–ª–∏—Ü—ã –ø–æ book_id.

    :param book_id: id –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
    :param sheet_name: –∏–º—è –ª–∏—Å—Ç–∞ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
    :param array: –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
    """
    cur_date = dt_formatted(3)
    ss: Spreadsheet = await get_spreadsheet(book_id)

    try:
        if sheet_name == '':
            try:
                worksheet: Worksheet = ss.add_worksheet(title=f'{cur_date}', rows=100, cols=9)
            except Exception as e:
                logging.warning(f'{e}')
                worksheet: Worksheet = ss.worksheet(f'{cur_date}')
        else:
            worksheet: Worksheet = ss.worksheet(sheet_name)

        worksheet.append_row(values=array, value_input_option=ValueInputOption.user_entered)  # –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ –ª–∏—Å—Ç –Ω–∏–∂–µ
        logging.info('–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã %s:\n%s', worksheet.title, pformat(array))
    except Exception as ex:
        logging.warning('Google add row:', exc_info=ex)


async def google_add_rows(book_id: str, sheet_name: str, array: Union[list, tuple]) -> None:
    """`–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏` –Ω–∞ –ª–∏—Å—Ç (sheet_name) —Ç–∞–±–ª–∏—Ü—ã –ø–æ book_id.

    :param array: –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
    :param book_id: id –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
    :param sheet_name: –∏–º—è –ª–∏—Å—Ç–∞ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
    """

    ss: Spreadsheet = await get_spreadsheet(book_id)

    try:
        worksheet: Worksheet = ss.worksheet(sheet_name)
        worksheet.append_rows(values=array, value_input_option=ValueInputOption.user_entered)  # –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ –ª–∏—Å—Ç –Ω–∏–∂–µ
        logging.info('–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã %s:\n%s', worksheet.title, pformat(array))
    except Exception as ex:
        logging.warning('Google add rows:', exc_info=ex)


async def google_worksheet_update(book_id: str, sheet_name: str, array: List[dict]) -> None:
    """`–ó–∞–º–µ–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ` –Ω–∞ –ª–∏—Å—Ç–µ (sheet_name) —Ç–∞–±–ª–∏—Ü—ã –ø–æ book_id.
    `–õ–∏—Å—Ç –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π –æ—á–∏—â–∞–µ—Ç—Å—è.`
    https://docs.gspread.org/en/v5.3.2/user-guide.html#updating-cells

    :param book_id: id –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
    :param sheet_name: –∏–º—è –ª–∏—Å—Ç–∞ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
    :param array: –º–∞—Å—Å–∏–≤ —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–ª–æ–≤–∞—Ä—å –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    """
    ss: Spreadsheet = await get_spreadsheet(book_id)
    worksheet: Worksheet = ss.worksheet(sheet_name)
    data = pd.DataFrame(array)
    worksheet.clear()
    worksheet.update(values=[data.columns.values.tolist()] + data.values.tolist(),
                     value_input_option=ValueInputOption.user_entered)


async def google_update_row(book_id: str, sheet_name: str, array: Union[list, tuple], query: str,
                            col: int = 1, col_s: str = 'A', col_f: str = 'H') -> bool:
    """`–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏` –Ω–∞ –ª–∏—Å—Ç (sheet_name) —Ç–∞–±–ª–∏—Ü—ã –ø–æ book_id.

    :param array: –º–∞—Å—Å–∏–≤
    :param query: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Å—Ç–æ–ª–±—Ü–µ n
    :param col: –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    :param col_s: –≤—Å—Ç–∞–≤–∫–∞ —Å —Å—Ç–æ–ª–±—Ü–∞
    :param col_f: –≤—Å—Ç–∞–≤–∫–∞ –ø–æ —Å—Ç–æ–ª–±–µ—Ü
    :param book_id: id –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
    :param sheet_name: –∏–º—è –ª–∏—Å—Ç–∞ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
    """
    try:
        ss: Spreadsheet = await get_spreadsheet(book_id)
        worksheet: Worksheet = ss.worksheet(sheet_name)
        cells = worksheet.findall(query, in_column=col)

        for cell in cells:
            worksheet.update(values=array, range_name=f'{col_s}{cell.row}:{col_f}{cell.row}',
                             value_input_option=ValueInputOption.user_entered)  # –æ–±–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ

            logging.info('–û–±–Ω–æ–≤–∏–ª–∏ –ª–∏—Å—Ç %s —Å–æ–¥–µ—Ä–∂–∞—â—É—é %s, –¥–ª—è %s:\n%s', worksheet.title, query, f"({col_s}{cell.row}:{col_f}{cell.row})", array)

        return True
    except Exception as ex:
        logging.warning('Google update row:', exc_info=ex)
        return False


async def google_delete_row(book_id: str, sheet_name: str, query: Union[str, int], col: int = 1) -> None:
    """`–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏` –Ω–∞ –ª–∏—Å—Ç (sheet_name) —Ç–∞–±–ª–∏—Ü—ã –ø–æ book_id.

    :param query: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Å—Ç–æ–ª–±—Ü–µ n
    :param col: –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    :param book_id: id –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
    :param sheet_name: –∏–º—è –ª–∏—Å—Ç–∞ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
    """
    try:
        ss: Spreadsheet = await get_spreadsheet(book_id)
        worksheet: Worksheet = ss.worksheet(sheet_name)
        cell = worksheet.find(query, in_column=col)
        worksheet.delete_rows(cell.row, cell.row)  # —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É
        logging.info('–£–¥–∞–ª–∏–ª–∏ —Å—Ç—Ä–æ–∫—É %s —Å–æ–¥–µ—Ä–∂–∞—â—É—é %s, –≤ –∫–Ω–∏–≥–µ %s', cell.row, query, worksheet.title)
    except Exception as ex:
        logging.warning('Google delete row:', exc_info=ex)


async def google_save_file(name: str, file_path: str, mime_type: str = 'image/png') -> str:
    """`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞` –∏–∑ –≥—É–≥–ª –¥–∏—Å–∫–µ.

    :param name: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    :param file_path: –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞
    :param mime_type: —Ç–∏–ø —Å–æ—Ö—Ä–∞–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'image/png'
    :returns: id —Ñ–∞–π–ª–∞
    """
    credentials = await get_credentials()
    service = build('drive', 'v3', credentials=credentials, cache_discovery=False)

    file_metadata = {
        'name': name,
        'mimeType': mime_type,
        'parents': [gs.FOLDER_ID_PHOTO_SAVE]
    }

    media = MediaFileUpload(file_path, mimetype='image/jpeg', resumable=True)
    return service.files().create(body=file_metadata, media_body=media, fields='id').execute()['id']


async def google_clear_folder(folder_id: str) -> None:
    credentials = await get_credentials()
    service = build('drive', 'v3', credentials=credentials, cache_discovery=False)
    results = service.files().list(
        pageSize=1000,
        fields="nextPageToken, files(id, name, mimeType, parents, createdTime)",
        q=f"'{folder_id}' in parents and mimeType contains 'image'").execute()

    data = []
    for i in results['files']:
        try:
            service.files().delete(fileId=i['id']).execute()
            data.append(i['id'])
        except Exception as e:
            logging.warning(f'–ü—Ä–æ–±–ª–µ–º–∞ —Å id {i["id"]} > {e}')
            continue

    data = "\n".join(data)
    logging.info("–£–¥–∞–ª–∏–ª–∏ —Ñ–∞–π–ª—ã —Å id:\n %s", data)


async def folder_in_google(folder_id: str) -> None:
    credentials = await get_credentials()
    service = build('drive', 'v3', credentials=credentials, cache_discovery=False)
    results = service.files().list(
        pageSize=1000,
        fields="nextPageToken, files(modifiedTime, id, name, mimeType, parents)",
        q=f"'{folder_id}' in parents").execute()

    data = []

    for i in results['files']:
        try:
            data.append(i['id'])
        except Exception as ex:
            logging.warning(f'–ü—Ä–æ–±–ª–µ–º–∞ —Å id: %s\n', i["id"], ex)
            continue

    with alive_bar(len(data)) as bar:
        for i in range(len(data)):
            time.sleep(.005)
            bar()


async def get_folder_info(folder_id: str) -> List:
    credentials = await get_credentials()
    service = build('drive', 'v3', credentials=credentials, cache_discovery=False)
    q = f"'{folder_id}' in parents and mimeType contains 'application/vnd.google-apps.folder'"
    results = service.files().list(pageSize=50,
                                   fields=f"nextPageToken, files(modifiedTime, id, name, mimeType, parents)",
                                   q=q).execute()
    return results.get('files', [])


async def get_folder_files_info(folder_id: str) -> List:
    credentials = await get_credentials()
    service = build('drive', 'v3', credentials=credentials, cache_discovery=False)
    contains = "in parents and (mimeType contains 'application/vnd.google-apps.document' or " \
               "mimeType contains 'pdf' " \
               "or mimeType contains 'video/mp4')"
    q = f"'{folder_id}' {contains}"
    results = service.files().list(pageSize=20,
                                   fields=f"nextPageToken, files(modifiedTime, id, name, mimeType, parents)",
                                   q=q).execute()

    next_page_token = results.get('nextPageToken')

    while next_page_token:
        next_page = service.files().list(pageSize=20,
                                         fields=f"nextPageToken, files(modifiedTime, id, name, mimeType, parents)",
                                         q=q,
                                         pageToken=next_page_token).execute()
        next_page_token = next_page.get('nextPageToken')
        results['files'] = results['files'] + next_page['files']

    return results.get('files', [])


async def google_delete_file(file_id: str) -> None:
    gc = await authorize()
    gc.del_spreadsheet(file_id)


__all__ = [
    'google_save_file',
    'google_clear_folder',
    'google_get_all_records',
    'google_exit',
    'exits_google',
    'google_write_off',
    'google_add_row',
    'google_add_rows',
    'google_update_row',
    'google_worksheet_update',
    'google_delete_row',
    'google_exits_by_point',
    'google_revenue',
    'get_folder_info',
    'get_folder_files_info',
    'google_safe',
    'google_authorize_token'
]
